import sqlite3
import logging
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "7934568684:AAHsKoficbDtOhA3oYjveRozQPoItFlqYRk"
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
class Registration(StatesGroup):
    enter_fa_username = State()

# –ö–æ–º–∞–Ω–¥–∞ /start (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    cursor.execute("SELECT fa_username FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if not user or not user[0]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞ FA
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ FurAffinity:")
        await state.set_state(Registration.enter_fa_username)
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º.")

    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞ FA
@dp.message(Registration.enter_fa_username)
async def enter_fa_username(message: types.Message, state: FSMContext):
    fa_username = message.text.strip()
    fa_link = f"https://www.furaffinity.net/user/{fa_username}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    
    cursor.execute(
        "INSERT INTO users (telegram_id, username, fa_username, fa_link) VALUES (?, ?, ?, ?) "
        "ON CONFLICT(telegram_id) DO UPDATE SET fa_username = ?, fa_link = ?",
        (message.from_user.id, message.from_user.username, fa_username, fa_link, fa_username, fa_link)
    )

    conn.commit()
    conn.close()

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(f"‚úÖ –ù–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: **{fa_username}**\nüîó –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: [FurAffinity]({fa_link})", parse_mode="Markdown")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ProfileEdit(StatesGroup):
    edit_name = State()
    edit_fa_link = State()
    edit_content_type = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        fa_username TEXT UNIQUE,
        fa_link TEXT,
        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_profile (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        name TEXT,
        content_type TEXT,
        FOREIGN KEY (user_id) REFERENCES users (telegram_id)
    )
    ''')

    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute(
            "INSERT INTO users (telegram_id, username) VALUES (?, ?)",
            (message.from_user.id, message.from_user.username)
        )
        conn.commit()
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –Ω–∞ FurAffinity, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º.")

    conn.close()

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_last_activity(user_id):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ last_activity –≤ —Ç–∞–±–ª–∏—Ü–µ users
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if "last_activity" not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    cursor.execute(
        "UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?",
        (user_id,)
    )

    conn.commit()
    conn.close()

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def get_last_activity_days(user_id):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT last_activity FROM users WHERE telegram_id = ?", (user_id,)
    )
    result = cursor.fetchone()
    conn.close()
    
    if result and result[0]:
        last_activity = datetime.datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        days_ago = (datetime.datetime.now() - last_activity).days
        return f"{days_ago} –¥–Ω. –Ω–∞–∑–∞–¥" if days_ago > 0 else "–°–µ–≥–æ–¥–Ω—è"
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

# –ö–æ–º–∞–Ω–¥–∞ /profile
@dp.message(Command("profile"))
async def profile(message: types.Message):
    update_last_activity(message.from_user.id)

    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT fa_username FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    
    if user and user[0]:
        fa_username = user[0]
        fa_link = f"https://www.furaffinity.net/user/{fa_username}"
    else:
        fa_username = "–ù–µ —É–∫–∞–∑–∞–Ω"
        fa_link = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    
    profile_info = f"ü¶ä **{fa_username}**\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å]({fa_link})\nüìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**: {get_last_activity_days(message.from_user.id)}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")],
        [InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ FA", callback_data="edit_fa_link")],
        [InlineKeyboardButton(text="üé® –£–∫–∞–∑–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="edit_content_type")]
    ])

    await message.answer(profile_info, reply_markup=keyboard, parse_mode="Markdown")
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "edit_name")
async def edit_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProfileEdit.edit_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer()

@dp.callback_query(F.data == "edit_fa_link")
async def edit_fa_link(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProfileEdit.edit_fa_link)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å FurAffinity:")
    await callback.answer()

@dp.callback_query(F.data == "edit_content_type")
async def edit_content_type(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProfileEdit.edit_content_type)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(ProfileEdit.edit_name)
async def handle_name_input(message: types.Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO user_profile (user_id, name) VALUES (?, ?)",(message.from_user.id, message.text))
    conn.commit()
    conn.close()
    await state.clear()
    await message.answer("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@dp.message(ProfileEdit.edit_fa_link)
async def handle_fa_link_input(message: types.Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET fa_link = ? WHERE telegram_id = ?",(message.text, message.from_user.id))
    conn.commit()
    conn.close()
    await state.clear()
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ FurAffinity —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@dp.message(ProfileEdit.edit_content_type)
async def handle_content_type_input(message: types.Message, state: FSMContext):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO user_profile (user_id, content_type) VALUES (?, ?)",
        (message.from_user.id, message.text)
    )
    conn.commit()
    conn.close()
    await state.clear()
    await message.answer("‚úÖ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ö–æ–º–∞–Ω–¥–∞ /menu
@dp.message(Command("menu"))
async def menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile_button(message: types.Message):
    await profile(message)  # –í—ã–∑—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É /profile

    import datetime

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_last_activity(user_id):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE telegram_id = ?",(user_id,))
    conn.commit()
    conn.close()

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def get_last_activity_days(user_id):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT last_activity FROM users WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result and result[0]:
        last_activity = datetime.datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        days_ago = (datetime.datetime.now() - last_activity).days
        return f"{days_ago} –¥–Ω. –Ω–∞–∑–∞–¥" if days_ago > 0 else "–°–µ–≥–æ–¥–Ω—è"
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
